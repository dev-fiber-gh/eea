#include <iostream>
#include <boost/multiprecision/cpp_int.hpp>

typedef boost::multiprecision::cpp_int mpint;

//Extended Euclidean algorithm
//Outputs out_d as modular multiplicative inverse : out_d * e = 1 mod phi
//Returns true if found and false if not
bool EEA(mpint* phi, mpint* e, mpint* out_d) {
    mpint resl;
    mpint resr;
    mpint res;

    mpint l = *phi;
    mpint r = *phi;
    mpint dl = *e;
    mpint dr = 1;

    mpint* pl = &l;
    mpint* pr = &r;
    mpint* pdl = &dl;
    mpint* pdr = &dr;
    mpint* tmp = nullptr;
    mpint* presl = &resl;
    mpint* presr = &resr;


    while (*pdl > 1) {
        res = *pl / *pdl;
        *presl = *pl - (*pdl * res);

        tmp = pl;
        pl = pdl;
        pdl = presl;
        presl = tmp;

        *presr = *pr - (*pdr * res);

        while (*presr < 0)
            *presr += *phi;

        if (presr == 0)
            return false;
        
        tmp = pr;
        pr = pdr;
        pdr = presr;
        presr = tmp;
    }

    *out_d = *pdr;
    return true;
}


int main(int argc, char **argv) {
    std::string message = "Tell me, O Muse, of that ingenious hero who travelled far and wide after he had sacked the famous town of Troy. Many cities did he visit, and many were the nations with whose manners and customs he was acquainted; moreover he suffered much by sea while trying to save his own life and bring his men safely home; but do what he might he could not save his men, for they perished through their own sheer folly in eating the cattle of the Sun-god Hyperion; so the god prevented them from ever reaching home. Tell me, too, about all these things, oh daughter of Jove, from whatsoever source you may know them.";
    
    
    mpint p = mpint("792091134489438376229987605001992375976124572544450245139403171491259200056114856641771725491815595143485844304428554713154280912993077585887839722863061483298050164307272613721738145117106785697543950343600614496310221517185349798552543677213986241187704460254652272539970706727250866201130737444813207676283532542827662466228939816247962894627333532571093179379063940800440515510880762505764379111338089084084935884593363743965376073466722254423664217411107807083638401826952866946722725413515767973106937191447108458610135884206199059951144800695198427669423341146290887272741616945740112335145661410295693420493082884871800497139998871045740109298684367942072280411809918554113044810797440179789875058025248578699769786338658481844667878585928745604459928813380825427607241390600788739346626672352756760088419037347847561826207595967267985145996156854425680219342865327710683600412347050606723441585643843005883849664511");
    
    mpint q = mpint("3134800950422261780053742436886405072977754434424673365551814830640016488695155085522654660711409401916053188935557605654785975775165669310466994133479970453773524234433048014246891519165870890053058377646715739861578014958271720095224068239576515131256787371938060653192462246773395447881573916557528713355471385036464828512297626005003291947364110848635592348360190493938229134787963073534104013367963578052100780672125205880522889255070996121710614311766819397022941398616749135180270923029172225099695740392973662717096415767126531513437147661595643261588290846316232453746611575649635168891425999447049453669703708149789025353357048768449363516331309663931205973731285752089598741840556680588198894282939308304982962099138252760221742685184566138415530965169300783679187148229457692073036740207814262982312417786849312341250471816763286997420700309761008028723119380992228580079566419928580068723642973842635224997171251");
    
    
    mpint n = p * q;
    mpint phi = (p - 1)*(q - 1);
    
    mpint e = 167772161;
    mpint d;
    
    if(!EEA(&phi, &e, &d)) {
        std::cout << "EEA failed.\n";
        return -1;
    };
    
    
    /*
        d must be:
        333123103816255198113554170168535773147511805697064500421711019829190437508772174609972341147631514928924175699233383678297160414959418443962943809707751365094156377754601483510101492781930958132024086975523645712269862027764609296192682655286260011068276883563670079003774765941537570110830704968680923253386275206613189978691259538529771692089202108805173709022800108846721332425831840700960306908173686698686443242916871346947024315644967769776953218936448305411819324212810172740566801955590240001390604495570915510866316978104583016968984268434544354143248770768125262461145483492495474488668565626608212660158469421201310346405537220650617535530041479367804041054299119456337814193700919971012228716948124443253932910156547738769180118601945477700157518851869008403168617057675910422363495097467770451442457457534537754696213390506961016653425996623991169675933792979193482868146986928878215259583273279006418230537336611772834719092454507477376439107741507057820934570435481007666918828907242804125012267606444113871578889611613575215192239079749959219710663231268354254998668652987119132454759978815980538293793150235869464848234616424988086734687787876408465951874797216492838028896184268362168773559291066073929313013837099956303370487012941581852628486764314665261898774438986726540114835764545833536768754436695915642647811618676850109944898528739258821492766385222216644292198211237922202791521973563335930131421988649519352777219667364897378030872280111679662554918493925884451497419587935376169678989188892514109520903918891309171256233939552853429355194255017030685104668877416438240973123859849233766361881559995275846725590628749506672999066667020244644947960867697029559403245794855101186813867120528021315527937891943383044833377808992730712196764454349149006873684715555854426668958739867165281173372959648052337315727375257441
    */
    std::cout << "d: " << d << "\n\n";
    
    std::vector<unsigned char> message_vector(message.size());
    for (int i = 0; i < message_vector.size(); i++)
        message_vector[i] = message[i];

    mpint m;    
    boost::multiprecision::import_bits(m, message_vector.begin(), message_vector.end());
    
    
    mpint enc_m = boost::multiprecision::powm(m, e, n);
    mpint dec_m = boost::multiprecision::powm(enc_m, d, n);

    
    std::vector<unsigned char> decrypted_message_vector;    
    boost::multiprecision::export_bits(dec_m, std::back_inserter(decrypted_message_vector), 8);
    
    
    std::string decrypted_message;
    decrypted_message.resize(decrypted_message_vector.size());
    for (int i = 0; i < decrypted_message.size(); i++)
        decrypted_message[i] = decrypted_message_vector[i];

    std::cout << "message:\n" << decrypted_message << "\n";

    
    return 0;
}
